ARG BASE_IMAGE
FROM ${BASE_IMAGE} as build

ARG OPENCV_VERSION=3.4.20

USER root

RUN apt update && apt install -y git build-essential pkg-config && mkdir /usr/local/lib/pkgconfig \ 
    && wget -qO /etc/apt/trusted.gpg.d/kitware-key.asc https://apt.kitware.com/keys/kitware-archive-latest.asc \
    && echo "deb https://apt.kitware.com/ubuntu/ focal main" | tee /etc/apt/sources.list.d/kitware.list \
    && apt update \
    && apt install -y cmake \
    && apt-get -y install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio \
    && apt install -y ffmpeg libv4l-dev libzmq3-dev libcurlpp-dev libcurl4-gnutls-dev\
    && apt install -y libmosquitto-dev libjansson-dev postgresql-client-common postgresql-client-12 libpq-dev
    
RUN mkdir /root/libraries \
    && cd /root/libraries \
    && mkdir opencv3420 \
    && cd opencv3420/ \
    && wget https://github.com/opencv/opencv/archive/refs/tags/${OPENCV_VERSION}.tar.gz \
    && tar -xf ${OPENCV_VERSION}.tar.gz \
    && wget https://github.com/opencv/opencv_contrib/archive/refs/tags/${OPENCV_VERSION}.tar.gz \
    && tar -xf ${OPENCV_VERSION}.tar.gz.1 \ 
    && cd opencv-${OPENCV_VERSION}/ \
    && mkdir build \
    && cd build/ \
    && cmake \
        -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D WITH_TBB=ON \
        -D WITH_CUDA=ON \
        -D WITH_CUDNN=ON \
        -D OPENCV_DNN_CUDA=ON \
        -D BUILD_opencv_cudacodec=OFF \
        -D ENABLE_FAST_MATH=1 \
        -D CUDA_FAST_MATH=1 \
        -D WITH_CUBLAS=1 \
        -D WITH_OPENGL=ON \
        -D WITH_GSTREAMER=ON \
        -D WITH_FFMPEG=ON \
        -D WITH_V4L=ON \
        -D WITH_LIBV4L=ON \
        -D BUILD_opencv_xfeatures2d=ON \
        -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules \
        -D PYTHON_DEFAULT_EXECUTABLE=$(which python3) \
        -D OPENCV_GENERATE_PKGCONFIG=ON \
        -D OPENCV_PC_FILE_NAME=opencv3420.pc \
        -D BUILD_EXAMPLES=ON .. \
    && make -j100 \
    && make install \
    && apt install -y libk5crypto3 libssl-dev libzmq3-dev libzmq5 libczmq-dev \
    && apt install -y rapidjson-dev
RUN cd /root/libraries \
    && git clone https://github.com/triton-inference-server/client.git \
    && cd client \
    && mkdir build \
    && cd build \
    && cmake \
        -DCMAKE_INSTALL_PREFIX=`pwd`/install \
        -DTRITON_ENABLE_CC_HTTP=OFF \
        -DTRITON_ENABLE_CC_GRPC=ON \
        -DTRITON_ENABLE_PERF_ANALYZER=OFF \
        -DTRITON_ENABLE_PERF_ANALYZER_C_API=OFF \
        -DTRITON_ENABLE_PERF_ANALYZER_TFS=OFF \
        -DTRITON_ENABLE_PERF_ANALYZER_TS=OFF \
        -DTRITON_ENABLE_PYTHON_HTTP=OFF \
        -DTRITON_ENABLE_PYTHON_GRPC=OFF \
        -DTRITON_ENABLE_JAVA_HTTP=OFF \
        -DTRITON_ENABLE_GPU=ON \
        -DTRITON_ENABLE_EXAMPLES=ON \
        -DTRITON_ENABLE_TESTS=ON .. \
    && make cc-clients \
    && cd /root/libraries \
    && git clone https://github.com/AlexeyAB/darknet \
    && cd darknet/ \
    && sed -i "1,7s/0/1/" Makefile \
    && make -j100 \
    && cp include/darknet.h /usr/local/include \
    && cp libdarknet.so /usr/local/lib \
    && echo "Name: libdarknet" >> libdarknet.pc \
    && echo "Description: https://github.com/AlexeyAB/darknet" >> libdarknet.pc \
    && echo "Libs: -L/usr/local/lib -ldarknet" >> libdarknet.pc \
    && echo "Cflags: -I/usr/local/include" >> libdarknet.pc \
    && cp libdarknet.pc /usr/local/lib/pkgconfig \
    && ldconfig

RUN set -eux; \
    apt-get update && apt-get install -y \
    net-tools \
    opus-tools \
    libopus-dev \
    libgnutls28-dev \
    librtmp-dev \
    vlc
    
COPY ./requirements.txt .

RUN set -eux; \
    pip install -r requirements.txt
    
WORKDIR /home/robolaunch